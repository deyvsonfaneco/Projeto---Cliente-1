global class BatchComprasClientesProdutos implements Database.Batchable<sObject>, Database.Stateful, Schedulable {
    
    String query;
	List<String> listError;
	List<Account> listContas;
    
    

    global BatchComprasClientesProdutos() {
		listError = new List<String>();
		listContas = new List<Account>();
		

	}
	
	global Database.QueryLocator start(Database.BatchableContext BC) {
				query = 'SELECT Id,  Name, Compras_Recorrentes__c, Compras_Per_Call__c, Tipo_da_Conta_Compra__c, Tipo_de_Compra_aut__c, Compras_FindUP_People__c, Compras_Avulsas__c, Compras_Piloto__c, Compras_Projetos__c, Compras_Insumo__c '
					+ 'FROM Account WHERE Cliente_da_Base__c = TRUE';
                
		return Database.getQueryLocator(query);
	}

   	global void execute(Database.BatchableContext BC, List<sObject> scope) {
		List<Account> clientes = (List<Account>) scope;
		for (Account conta : clientes) {
			conta.Compras_Avulsas__c = 0;
			conta.Compras_FindUP_People__c = 0;
			conta.Compras_Insumo__c = 0;
			conta.Compras_Projetos__c = 0;
			conta.Compras_Recorrentes__c = 0;
			conta.Compras_Per_Call__c = 0;
			conta.Compras_Piloto__c = 0;
			
			List<Opportunity> listCompras;

            listCompras = [SELECT Id , Produto_FindUP__c, Data_do_Neg_cio_Fechado_F__c FROM Opportunity
                           WHERE IsWon = true 
				           AND Amount > 10
                           AND AccountId = :conta.Id
					       ORDER BY Data_do_Neg_cio_Fechado_F__c DESC LIMIT 3];

				Set<String> listComprasString = new Set<String>();
				Boolean eRecorrente = false;

				for(Opportunity opp: listCompras){
					if(opp.Produto_FindUP__c == 'FindUP People' || opp.Produto_FindUP__c == 'FindUP People Recorrente - Carga Automática'){
						conta.Compras_FindUP_People__c ++;
						listComprasString.add('People');
                    
					} else if(opp.Produto_FindUP__c == 'Contrato Recorrente' || opp.Produto_FindUP__c == 'Recorrente - Carga Automática'){
						conta.Compras_Recorrentes__c ++;
						listComprasString.add('Recorrente');
						eRecorrente = true;

					} else if(opp.Produto_FindUP__c == 'Carga Avulsa'){
						conta.Compras_Avulsas__c ++;
						listComprasString.add('Avulso');
						
					} else if(opp.Produto_FindUP__c == 'Per Call'){
						conta.Compras_Per_Call__c ++;
						listComprasString.add('Per Call');

					} else if(opp.Produto_FindUP__c == 'Projetos em Clientes Avulsos' || opp.Produto_FindUP__c == 'Projetos em Clientes Recorrentes'){
						conta.Compras_Projetos__c ++;	
						listComprasString.add('Projeto');

					} else if(opp.Produto_FindUP__c == 'Fornecimento de Insumos'){
						conta.Compras_Insumo__c ++;
						listComprasString.add('Insumo');

					} else if(opp.Produto_FindUP__c == 'Piloto FindUP'){
						conta.Compras_Piloto__c ++;
						listComprasString.add('Piloto');
					}
					
				}
			
			conta.Tipo_de_Compra_aut__c = getCompras(listComprasString);
			if(eRecorrente){
				conta.Tipo_da_Conta_Compra__c = 'Recorrente';
			} else {
				conta.Tipo_da_Conta_Compra__c = 'Avulso';
			}

			listContas.add(conta);

		}

		TriggerHandlerConta.ignoreTrigger = true;
		Toolkit.ignoraRegraValidacao(true);
		Database.SaveResult[] sr = Database.update(listContas, false);
		TriggerHandlerConta.ignoreTrigger = false;
		Toolkit.ignoraRegraValidacao(false);

		for(Database.SaveResult s : sr){
			if(!s.isSuccess()){
				listError.add(String.valueOf(s.getErrors()));
			}
		}

        if(listError != null && listError.size() > 0){
            System.debug('OCORREU ERRO: ' + listError);
        }

	}


	global void finish(Database.BatchableContext BC) {

	}

	global void execute(SchedulableContext sc) {
		Database.executeBatch( new BatchComprasClientesProdutos(), 10 );
	}  

	private String getCompras(Set<String> listComprasString){
		String compraAdd = '';			
		for(String compra : listComprasString){
			compraAdd += compra+';';
		}

		return compraAdd;
	}

}
