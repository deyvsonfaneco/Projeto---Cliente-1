public class TriggerHandlerOportunidade {
  
	public static Boolean ignoreTrigger {get;set;}
	
	
	private TriggerHandlerOportunidade() {  }

	public static void notificarComissaoSDR(List<Opportunity> listNewOpp, List<Opportunity> listOldOpp){
		if(ignoreTrigger == null || ignoreTrigger == false){
			Opportunity newOpp = listNewOpp[0];
			Opportunity oldOpp = listOldOpp[0];

			boolean naoNotificar = false;
		try{
			if(newOpp.isWon != oldOpp.isWon && newOpp.isWon == true){
				List<Opportunity> listOpp1 = [SELECT Id FROM Opportunity 
														WHERE AccountId = : newOpp.AccountId												
														AND isClosed = true
														AND isWon = true													
														AND Possui_pr_venda_piloto__c = true];
			
				if(listOpp1 != null && listOpp1.size() > 0){
					naoNotificar = true;	
					
				} else if(newOpp.Produto_FindUP__c != 'Piloto' && newOpp.StageName == 'Negócio Fechado'){
							List<Opportunity> listOpp = [SELECT Id FROM Opportunity 
																	WHERE AccountId = : newOpp.AccountId
																	AND Id != : newOpp.Id
																	AND Atividade_SDR__c = 'Sim'
																	AND isClosed = true
																	AND isWon = true
																	AND Produto_FindUP__c = 'Piloto'];																
																	
						if(listOpp != null && listOpp.size() > 0){
							newOpp.Possui_pr_venda_piloto__c = true;
						}
					}
			}								
			}catch(Exception ex){
				System.debug('Erro: ' + ex.getMessage());
				System.debug('Motivo: ' + ex.getCause());
				System.debug('Linha: ' + ex.getLineNumber());
			}		    				
		}
	}

	public static void validarFeelingInsert(List<Opportunity> listOpp){
		if(ignoreTrigger == null || ignoreTrigger == false){
			Opportunity opp = listOpp[0];
			
		try{
			Map<Id, User> mapUsers = new Map<Id, User>();
			for(User users : [SELECT Id, FirstName, LastName, Area_de_Atuacao__c, IsAdmin__c FROM User WHERE isActive = true]){																																																	
			 mapUsers.put(users.Id, users);
			}
			if(mapUsers.get(UserInfo.getUserId()).Area_de_Atuacao__c == 'BDR' || mapUsers.get(UserInfo.getUserId()).Area_de_Atuacao__c == 'SDR'){
				if(opp.Feeling_Comercial__c != null ){
					opp.addError('[ERRO] Você não tem permissão para preencher o campo Feeling Comercial. Contate seu administrador.');
				}
			}
			}catch(Exception ex){
				System.debug('Erro: ' + ex.getMessage());
				System.debug('Motivo: ' + ex.getCause());
				System.debug('Linha: ' + ex.getLineNumber());
			}
		}
	}	

	public static void validarFeelingComercial(List<Opportunity> listOpp, List<Opportunity> listOldOpp){
		if(ignoreTrigger == null || ignoreTrigger == false){
			Opportunity opp = listOpp[0];
			Opportunity oldOpp = listOldOpp[0];

			Map<Id, User> mapUsers = new Map<Id, User>();
			for(User users : [SELECT Id, FirstName, LastName, Area_de_Atuacao__c, IsAdmin__c FROM User WHERE isActive = true]){																																																	
			 mapUsers.put(users.Id, users);
			}
			if(mapUsers.get(UserInfo.getUserId()).Area_de_Atuacao__c == 'BDR' || mapUsers.get(UserInfo.getUserId()).Area_de_Atuacao__c == 'SDR'){
			  if(opp.Feeling_Comercial__c != oldOpp.Feeling_Comercial__c ){
				  opp.addError('[ERRO] Você não tem permissão para preencher o campo Feeling Comercial. Contate seu administrador.');
				}
			} else if(opp.StageName != 'Mapeamento BDR'            && 
					 opp.Feeling_Comercial__c == null              && 
					!mapUsers.get(UserInfo.getUserId()).isAdmin__c &&
			         mapUsers.get(UserInfo.getUserId()).Area_de_Atuacao__c == 'Vendedor'){
				opp.addError('[ERRO] Para avançar de fase é necessário preencher o campo Feeling Comercial.');
			}
		    	
		}

	}

	public static void validarOrigemLead(List<Opportunity> listOpp){
		if(ignoreTrigger == null || ignoreTrigger == false){
			Opportunity opp = listOpp[0];
	
			List<Account> listAcc = [SELECT Id, Name, AccountSource FROM Account WHERE Id = : opp.AccountId];
			if(listAcc != null && listAcc.size() > 0){
				for(Account acc : listAcc){
					if(acc.AccountSource != null){
						opp.LeadSource = acc.AccountSource;
					}
				}
			}	
		}
	}
	

    public static void bloquearCriarOppVendedor(List<Opportunity> listOpp){
		if(ignoreTrigger == null || ignoreTrigger == false){			
			Map<Id, User> mapUsers = new Map<Id, User>();
			for(User users : [SELECT Id, FirstName, LastName, Area_de_Atuacao__c, IsAdmin__c FROM User WHERE isActive = true AND IsAdmin__c = false]){
				mapUsers.put(users.Id, users);
			}

			Opportunity opp = listOpp[0];
			/*
			if(mapUsers.get(UserInfo.getUserId()) != null && mapUsers.get( UserInfo.getUserId() ).Area_de_Atuacao__c == 'Vendedor'){
				List<Account> listAcc = [SELECT Id, OwnerId FROM Account 
														    WHERE Id = : opp.AccountId
															AND OwnerId != : UserInfo.getUserId()];
				if(listAcc != null && listAcc.size() > 0){
					opp.addError('[ERRO] Você só tem permissão para iniciar novas oportunidades em contas de sua carteira.');
				}
				
			}
			*/
			if(mapUsers.get(UserInfo.getUserId()) != null && mapUsers.get( UserInfo.getUserId() ).Area_de_Atuacao__c == 'Vendedor'){
				try{
					List<User> usuarios = [SELECT Id, FirstName, LastName, Area_de_Atuacao__c FROM User WHERE isActive = true AND Area_de_Atuacao__c = 'BDR'];
					for(User user : usuarios){
						List<Opportunity> newOpp = [SELECT Id, CreatedById, OwnerId FROM Opportunity WHERE IsClosed = false AND isWon = false 
												AND CreatedById = : user.Id
												AND AccountId = : opp.AccountId
												AND OwnerId = : UserInfo.getUserId()];


						if(newOpp != null && newOpp.size() > 0){
							opp.addError('[ERRO] Você possui uma oportunidade lançada por pré vendas, para iniciar uma nova oportunidade contate o BDR de origem.');
						}
					}		
				} catch(Exception ex){
					System.debug('Erro: ' + ex.getCause());
					System.debug('Mensagem: ' + ex.getMessage());
					System.debug('Linha: ' + ex.getLineNumber());
				}
			}	
		}		
    }


	public static void atualizarStatusConta(List<Opportunity> listNewOpp, List<Opportunity> listOldOpp){
		if (ignoreTrigger == null || ignoreTrigger == false) {

			Opportunity oldOpp = listOldOpp[0];
			Opportunity newOpp = listNewOpp[0];
		    
			    
			try{  
				if(!Test.isRunningTest()){
					if(newOpp.Liberar_Oportunidade__c == true){
										
						List<Account> listAcc = [SELECT Id, Name, Classificacao_Cliente__c , Etapa_Comercial__c, Qualifica_o_da_Conta__c, OwnerId FROM Account WHERE Id = : newOpp.AccountId];
						for(Account conta: listAcc){
					
							conta.OwnerId = newOpp.OwnerId;
							conta.Classificacao_Cliente__c = 'Sem Consumo';
							conta.Etapa_Comercial__c = 'VENDAS';
							conta.Qualifica_o_da_Conta__c = 'Em Negociação';
						}
						Database.update(listAcc, false);
					}
				}
			} catch(Exception ex){
				System.debug('Erro: ' + ex.getMessage());
				System.debug('Motivo: ' + ex.getCause());
				System.debug('Linha: ' + ex.getLineNumber());
			}
		    
		}
	}


	public static void aprovarOportunidade(List<Opportunity> listNewOpp, List<Opportunity> listOldOpp){
		Map<Id, User> mapUsers = new Map<Id, User>();
		 for(User user : [SELECT Id, FirstName, LastName, Area_de_Atuacao__c, IsAdmin__c FROM User WHERE isActive = true]){
		  mapUsers.put(user.Id, user);
		 }
	    Opportunity oldOpp = listOldOpp[0];
		  Opportunity newOpp = listNewOpp[0];
		  
            

		      //Alterando proprietário
			if(mapUsers.get( UserInfo.getUserId() ).Area_de_Atuacao__c == 'BDR' &&  mapUsers.get( newOpp.OwnerId ).Area_de_Atuacao__c == 'Vendedor'){
		    
        if( newOpp.OwnerId != oldOpp.OwnerId ){

         // enviar aprovação 	

         String result = '';
			   

           try{
           Opportunity opp = [SELECT Id, Name, StageName, OwnerId FROM Opportunity WHERE id = :newOpp.Id];

           Approval.ProcessSubmitRequest req = new Approval.ProcessSubmitRequest();
           req.setComments('Enviando oportunidade para aprovação');
           req.setObjectId(opp.Id);
           req.setSubmitterId(opp.OwnerId); 
           req.setProcessDefinitionNameOrId('Aprovar_Oportunidade');
           req.setSkipEntryCriteria(false);

           if(!Test.isRunningTest()){
            Approval.ProcessResult resultApproval = Approval.process(req);
            }

           result = 'Solicitada aprovação da Oportunidade. Aguarde uma resposta para poder seguir';

           } catch(Exception ex){
           System.debug('Erro: ' + ex.getCause());
           System.debug('Mensagem: ' + ex.getMessage());
           System.debug('Local: ' + ex.getLineNumber());

           result = '[ERRO] ao enviar processo para aprovação. Motivo: ' + ex.getMessage();
           }
          }
			}
	}


	public static void oportunidadeRejeitadaBDR( list<Opportunity> listNewOpp){
		if (ignoreTrigger == null || ignoreTrigger == false) {

			Map<Id, User> mapUsers = new Map<Id, User>();
			for(User user : [SELECT Id, FirstName, LastName, Area_de_Atuacao__c, IsAdmin__c, Email FROM User WHERE isActive = true]){
			   mapUsers.put(user.Id, user);
			}
		    for(Opportunity opp: listNewOpp){
			try{
			   if (opp.Oportunidade_Rejeitada__c == true &&  mapUsers.get( opp.OwnerId ).Area_de_Atuacao__c == 'Vendedor') {
				   opp.OwnerId = opp.BDR__c;

			    }
          } catch(Exception ex){
          System.debug('Erro: ' + ex.getMessage());
          System.debug('Motivo: ' + ex.getCause());
          System.debug('Linha: ' + ex.getLineNumber());
			    }
		    } 
		}
	}
	
 }
